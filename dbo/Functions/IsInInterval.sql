CREATE FUNCTION IsInInterval ( @attributevalue_id UNIQUEIDENTIFIER, @interval_id UNIQUEIDENTIFIER ) RETURNS INT AS BEGIN DECLARE @lowerBound DECIMAL(6) DECLARE @upperBound DECIMAL(6) DECLARE @value DECIMAL(6) DECLARE @isInInterval INT DECLARE @AttributeType NVARCHAR(10) SET @AttributeType = ( SELECT B.[Type] AS AttributeType FROM AttributeValue A INNER JOIN Attribute B ON B.GUIDReference = A.DemographicId WHERE A.GUIDReference = @attributevalue_id) IF @AttributeType = 'Enum' BEGIN SELECT @isInInterval = COUNT(DEF1.Id) FROM (SELECT ED.Id  FROM AttributeValue AV INNER JOIN EnumAttributeValue EAV ON EAV.GUIDReference = AV.GUIDReference INNER JOIN EnumDefinition ED ON ED.Id = EAV.Value_Id WHERE AV.GUIDReference = @attributevalue_id GROUP BY ED.Id) AS DEF1 WHERE DEF1.Id IN (SELECT ED.Id FROM DemographicValueSet DVS INNER JOIN EnumDefinition ED ON ED.EnumValueSet_Id = DVS.GUIDReference WHERE DVS.GUIDReference = @interval_id) END ELSE BEGIN SELECT @lowerBound = lowerBound, @upperBound = upperBound FROM BoundsFor(@interval_id) SELECT @isInInterval = count(*) FROM (SELECT CASE WHEN D.[Type]  = 'Int' THEN E.Value ELSE CASE WHEN D.[Type]  = 'Float' then F.Value ELSE CASE WHEN D.[Type] = 'Bool' THEN G.Value END END END AS Value FROM AttributeValue A INNER JOIN DemographicValueGrouping B ON B.Demographic_Id = A.DemographicId INNER JOIN DemographicValue C ON C.Grouping_Id = B.GUIDReference AND C.GUIDReference = @interval_id INNER JOIN Attribute D ON D.GUIDReference = A.DemographicId LEFT JOIN IntAttributeValue E ON E.GUIDReference = A.GUIDReference LEFT JOIN FloatAttributeValue F ON F.GUIDReference = A.GUIDReference LEFT JOIN BooleanAttributeValue G ON G.GUIDReference = A.GUIDReference WHERE A.GUIDReference = @attributevalue_id AND C.GUIDReference = @interval_id) valueTable WHERE valueTable.Value BETWEEN @lowerBound AND @upperBound END RETURN @isInInterval END